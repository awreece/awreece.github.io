<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Code Arcana - Alex Reece</title><link>http://codearcana.com/</link><description></description><lastBuildDate>Sat, 21 Jan 2017 00:00:00 -0800</lastBuildDate><item><title>A real Hello World example for react</title><link>http://codearcana.com/posts/2017/01/21/a-real-hello-world-example-for-react.html</link><description>&lt;p&gt;I got frustrated following the React
&lt;a href="https://facebook.github.io/react/docs/hello-world.html"&gt;"Hello, World"&lt;/a&gt; and 
&lt;a href="https://facebook.github.io/react/tutorial/tutorial.html"&gt;tutorial&lt;/a&gt;
because of the implied magic. How does it actually work? Where does it fit
into a html page? &lt;em&gt;How do I run React locally?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The "Hello, World" has a 4 line example that does not actually work: &lt;em&gt;this&lt;/em&gt; is
the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Sat, 21 Jan 2017 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:codearcana.com,2017-01-21:/posts/2017/01/21/a-real-hello-world-example-for-react.html</guid><category>react</category><category>helloworld</category><category>example</category></item><item><title>Fast query log with tcpdump and tshark</title><link>http://codearcana.com/posts/2016/07/21/fast-query-log-with-tcpdump-and-tshark.html</link><description>&lt;p&gt;&lt;a href="http://blog.memsql.com/dbbench-active-benchmarking/"&gt;&lt;code&gt;dbbench&lt;/code&gt;&lt;/a&gt; is a tool I've been working on for a while at MemSQL. It is an open source database workload driver engineers at MemSQL and I use for performance testing. One often-overlooked feature in &lt;code&gt;dbbench&lt;/code&gt; is the ability to replay query log files. Previously, this was a somewhat manual process …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Thu, 21 Jul 2016 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:codearcana.com,2016-07-21:/posts/2016/07/21/fast-query-log-with-tcpdump-and-tshark.html</guid><category>Linux</category><category>tcpdump</category><category>wireshark</category><category>dbbench</category></item><item><title>Arena "leak" in glibc</title><link>http://codearcana.com/posts/2016/07/11/arena-leak-in-glibc.html</link><description>&lt;p&gt;I diagnose an unexpected behavior in the glibc malloc implementation manifesting as a slow memory "leak".&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Mon, 11 Jul 2016 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:codearcana.com,2016-07-11:/posts/2016/07/11/arena-leak-in-glibc.html</guid><category>glibc</category><category>perf_events</category><category>malloc</category><category>Linux</category></item><item><title>A review of Drift Into Failure</title><link>http://codearcana.com/posts/2016/03/02/a-review-of-drift-into-failure.html</link><description>&lt;p&gt;On the advice of a former colleague, I recently read &lt;a href="http://smile.amazon.com/Drift-into-Failure-Components-Understanding-ebook/dp/B009KOKXKY"&gt;&lt;em&gt;Drift into Failure: From Hunting Broken Components to Understanding Complex Systems&lt;/em&gt;&lt;/a&gt; by Sidney Dekker. &lt;/p&gt;
&lt;h2&gt;An overview of &lt;em&gt;Drift into Failure&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;By examining several recent disasters (ranging from the Challenger explosion to the housing market collapse of 2008), Dekker contends that …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Wed, 02 Mar 2016 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:codearcana.com,2016-03-02:/posts/2016/03/02/a-review-of-drift-into-failure.html</guid><category>opinion</category></item><item><title>An informal survey of Linux dynamic tracers</title><link>http://codearcana.com/posts/2016/01/09/an-informal-survey-of-linux-dynamic-tracers.html</link><description>&lt;p&gt;I survey some dynamic tracers (e.g. perf, sysdig) available on Linux.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Sat, 09 Jan 2016 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:codearcana.com,2016-01-09:/posts/2016/01/09/an-informal-survey-of-linux-dynamic-tracers.html</guid><category>Linux</category><category>tracing</category><category>opinion</category><category>perf_events</category></item><item><title>Dtrace isn't just a tool; it's a philosophy</title><link>http://codearcana.com/posts/2016/01/03/dtrace-isnt-just-a-tool-its-a-philosophy.html</link><description>&lt;p&gt;I document some pain points from recent performance investigations and then speculate that such issues are endemic to the Linux community.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Sun, 03 Jan 2016 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:codearcana.com,2016-01-03:/posts/2016/01/03/dtrace-isnt-just-a-tool-its-a-philosophy.html</guid><category>Linux</category><category>perf_events</category><category>opinion</category></item><item><title>Using off-cpu flame graphs on Linux</title><link>http://codearcana.com/posts/2015/12/20/using-off-cpu-flame-graphs-on-linux.html</link><description>&lt;p&gt;I use off-cpu flame graphs to identify that repeated mmap calls are slowing my database.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Sun, 20 Dec 2015 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:codearcana.com,2015-12-20:/posts/2015/12/20/using-off-cpu-flame-graphs-on-linux.html</guid><category>Linux</category><category>perf_events</category><category>flamegraph</category></item><item><title>Statically linking libstdc++</title><link>http://codearcana.com/posts/2015/12/09/statically-linking-libstdc.html</link><description>&lt;p&gt;In this post, I statically link &lt;code&gt;libstdc++&lt;/code&gt; into a &lt;code&gt;configure&lt;/code&gt;d library.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Wed, 09 Dec 2015 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:codearcana.com,2015-12-09:/posts/2015/12/09/statically-linking-libstdc.html</guid><category>linking</category><category>gcc</category></item><item><title>Why are builds on HGFS so slow?</title><link>http://codearcana.com/posts/2015/12/04/why-are-builds-on-hgfs-so-slow.html</link><description>&lt;p&gt;We use flame graphs to identify that hgfs is the bottleneck in my build.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Fri, 04 Dec 2015 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:codearcana.com,2015-12-04:/posts/2015/12/04/why-are-builds-on-hgfs-so-slow.html</guid><category>profiling</category><category>vmware</category><category>make</category></item><item><title>gdb breakpoint commands and conditional breakpoints</title><link>http://codearcana.com/posts/2015/05/16/gdb-breakpoint-commands-and-conditional-breakpoints.html</link><description>&lt;p&gt;During my first week at my new job, I had the opportunity to teach some of my new coworkers about &lt;code&gt;gdb&lt;/code&gt; breakpoint commands and conditional breakpoints. I had a lot of fun teaching these techniques my friends here and thought others might find the story enjoyable as well.&lt;/p&gt;
&lt;h2&gt;Breakpoint commands …&lt;/h2&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Sat, 16 May 2015 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:codearcana.com,2015-05-16:/posts/2015/05/16/gdb-breakpoint-commands-and-conditional-breakpoints.html</guid><category>gdb</category><category>conditional breakpoint</category><category>breakpoint commands</category></item><item><title>Compiling with libtool on OmniOS</title><link>http://codearcana.com/posts/2014/04/30/compiling-with-libtool-on-omnios.html</link><description>&lt;p&gt;I'm having issues compiling glib2.40.0 (a libtool compiled shared library) on Omnios.&lt;/p&gt;
&lt;p&gt;In particular, my shared library has a static initializer that does not get executed by the libtool linked library. I've reduced this to the test case below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;__attribute__&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;myctor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;in …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Wed, 30 Apr 2014 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:codearcana.com,2014-04-30:/posts/2014/04/30/compiling-with-libtool-on-omnios.html</guid><category>libtool</category><category>omnios</category></item><item><title>Ghost in the Shellcode 2014 - fuzzy</title><link>http://codearcana.com/posts/2014/01/19/ghost-in-the-shellcode-2014-fuzzy.html</link><description>&lt;p&gt;tl;dr - &lt;code&gt;fuzzy&lt;/code&gt; is a "super secure parsing engine", that includes a histogram function. The histogram ascii text uses a buffer on the stack, but will increment
buckets past the end of the buffer if non ascii text is provided, allowing us to
rop. Binary and exploit available &lt;a
href="http://ppp.cylab.cmu.edu/wordpress/wp-content/uploads/2014/01/fuzzy.tar.gz"&gt;here&lt;/a&gt;.
Cross …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Sun, 19 Jan 2014 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:codearcana.com,2014-01-19:/posts/2014/01/19/ghost-in-the-shellcode-2014-fuzzy.html</guid><category>ctf</category><category>exploitation</category></item><item><title>Ghost in the Shellcode 2014 - gitsmsg</title><link>http://codearcana.com/posts/2014/01/19/ghost-in-the-shellcode-2014-gitsmsg.html</link><description>&lt;p&gt;&lt;em&gt;tl;dr&lt;/em&gt; - &lt;code&gt;gitsmsg&lt;/code&gt; is a messaging server. A heap overflow led to arbitrary read / write and eventual code exec 
after circumventing RELRO. Binary and exploit available &lt;a
href="http://ppp.cylab.cmu.edu/wordpress/wp-content/uploads/2014/01/gitsmsg.tar.gz"&gt;here&lt;/a&gt;. Cross post from 
&lt;a href="http://ppp.cylab.cmu.edu/wordpress/?p=1152"&gt;PPP blog&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The program&lt;/h2&gt;
&lt;p&gt;First, we reverse engineered much of the binary. 
You "login" as a user, then can compose …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Sun, 19 Jan 2014 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:codearcana.com,2014-01-19:/posts/2014/01/19/ghost-in-the-shellcode-2014-gitsmsg.html</guid><category>ctf</category><category>exploitation</category></item><item><title>Reading resumes</title><link>http://codearcana.com/posts/2013/09/25/reading-resumes.html</link><description>&lt;p&gt;Tonight, I sat down and read through every resume in the 2013 SCS senior
resume book. Reading resumes for a company is really interesting, because
I find myself looking at them very differently. As a student, I didn't
really understand what sections of the resume are important. I thought
it …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Wed, 25 Sep 2013 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:codearcana.com,2013-09-25:/posts/2013/09/25/reading-resumes.html</guid><category>opinion</category></item><item><title>Bash Performance Tricks</title><link>http://codearcana.com/posts/2013/08/06/bash-performance-tricks.html</link><description>&lt;p&gt;My coworkers presented a silly programming interview style question to
me the other day: given a list of words, find the largest set of words from
that list that all have the same hash value. Everyone was playing around
with a different language, and someone made the claim that it …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Tue, 06 Aug 2013 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:codearcana.com,2013-08-06:/posts/2013/08/06/bash-performance-tricks.html</guid><category>bash</category><category>profiling</category></item><item><title>My zsh theme</title><link>http://codearcana.com/posts/2013/06/11/my-zsh-theme.html</link><description>&lt;p&gt;I spent some time this week switching from &lt;code&gt;bash&lt;/code&gt; to &lt;code&gt;zsh&lt;/code&gt; (I really enjoy
&lt;code&gt;zsh&lt;/code&gt; - I treat it as &lt;code&gt;bash&lt;/code&gt; with floating point arithmetic and other
niceities)
and making a theme for
&lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;&lt;code&gt;oh-my-zsh&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/sorin-ionescu/prezto"&gt;&lt;code&gt;prezto&lt;/code&gt;&lt;/a&gt;
for myself. I'm not quite done, but I am pretty pleased with
the results. &lt;/p&gt;
&lt;p&gt;It …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Tue, 11 Jun 2013 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:codearcana.com,2013-06-11:/posts/2013/06/11/my-zsh-theme.html</guid><category>zsh</category></item><item><title>Introduction to return oriented programming (ROP)</title><link>http://codearcana.com/posts/2013/05/28/introduction-to-return-oriented-programming-rop.html</link><description>&lt;p&gt;A brief introduction to Return Oriented Programming (ROP) exploits.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Tue, 28 May 2013 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:codearcana.com,2013-05-28:/posts/2013/05/28/introduction-to-return-oriented-programming-rop.html</guid><category>exploitation</category><category>tutorial</category></item><item><title>A brief introduction to x86 calling conventions</title><link>http://codearcana.com/posts/2013/05/21/a-brief-introduction-to-x86-calling-conventions.html</link><description>&lt;p&gt;To support some of my other tutorials, I prepared a brief introduction to x86 calling conventions.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Tue, 21 May 2013 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:codearcana.com,2013-05-21:/posts/2013/05/21/a-brief-introduction-to-x86-calling-conventions.html</guid><category>tutorial</category></item><item><title>Achieving maximum memory bandwidth</title><link>http://codearcana.com/posts/2013/05/18/achieving-maximum-memory-bandwidth.html</link><description>&lt;p&gt;I embarked upon a quest to understand some unexpected behavior and write a program that achieved the theoretical maximum memory bandwidth.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Sat, 18 May 2013 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:codearcana.com,2013-05-18:/posts/2013/05/18/achieving-maximum-memory-bandwidth.html</guid><category>profiling</category></item><item><title>A cross-platform monotonic timer</title><link>http://codearcana.com/posts/2013/05/15/a-cross-platform-monotonic-timer.html</link><description>&lt;p&gt;I've been working on writing a memory bandwidth benchmark for a while and needed to use a monotonic timer to compute accurate timings. I have since learned that this is more challenging to do that I initially expected and each platform has a different way of doing it.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Wed, 15 May 2013 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:codearcana.com,2013-05-15:/posts/2013/05/15/a-cross-platform-monotonic-timer.html</guid><category>profiling</category></item><item><title>Why is omp_get_num_procs so slow?</title><link>http://codearcana.com/posts/2013/05/10/why-is-omp_get_num_procs-so-slow.html</link><description>&lt;p&gt;Some students had some difficulty profiling their code because &lt;code&gt;omp_get_num_procs&lt;/code&gt; was dominating the profiling traces. I tracked it down and found that the profiling tools emitted misleading results when the library didn't have symbols.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Fri, 10 May 2013 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:codearcana.com,2013-05-10:/posts/2013/05/10/why-is-omp_get_num_procs-so-slow.html</guid><category>profiling</category></item><item><title>Introduction to format string exploits</title><link>http://codearcana.com/posts/2013/05/02/introduction-to-format-string-exploits.html</link><description>&lt;p&gt;A brief introduction to format string exploits.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Thu, 02 May 2013 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:codearcana.com,2013-05-02:/posts/2013/05/02/introduction-to-format-string-exploits.html</guid><category>exploitation</category><category>tutorial</category></item><item><title>PicoCTF Videos</title><link>http://codearcana.com/posts/2013/04/28/picoctf-videos.html</link><description>&lt;p&gt;For PicoCTF this year, I made some slides and recorded some video tutorials.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Sun, 28 Apr 2013 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:codearcana.com,2013-04-28:/posts/2013/04/28/picoctf-videos.html</guid><category>exploitation</category><category>tutorial</category></item><item><title>Exploiting a Go Binary</title><link>http://codearcana.com/posts/2013/04/23/exploiting-a-go-binary.html</link><description>&lt;p&gt;Earlier this year, tylerni7 showed us a proof of concept for a 32 bit Go exploit using &lt;a href="https://code.google.com/p/go/issues/detail?id=5336"&gt;this issue&lt;/a&gt;. geohot and I had a wager over who could get the first remote code execution on &lt;a href="http://play.golang.org"&gt;play.golang.org&lt;/a&gt;: he won, but just barely ;-). Props also to ricky for helping to find the underlying cause/writing the patch. Here is a summary of how we did it.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Tue, 23 Apr 2013 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:codearcana.com,2013-04-23:/posts/2013/04/23/exploiting-a-go-binary.html</guid><category>golang</category><category>exploitation</category></item><item><title>Introduction to Using Profiling Tools</title><link>http://codearcana.com/posts/2013/02/26/introduction-to-using-profiling-tools.html</link><description>&lt;p&gt;In this article, you will see several performance tools used to identify bottlenecks in a simple program.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Tue, 26 Feb 2013 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:codearcana.com,2013-02-26:/posts/2013/02/26/introduction-to-using-profiling-tools.html</guid><category>profiling</category></item><item><title>Pai Mei on Mac OSX 10.8</title><link>http://codearcana.com/posts/2012/10/28/pai-mei-on-mac-osx-108.html</link><description>&lt;p&gt;&lt;a href="https://github.com/OpenRCE/paimei"&gt;Pai Mei&lt;/a&gt; is an open source windows reverse engineering framework. At one point, it was ported to Mac OSX but the project is not very actively maintained and the current instructions are quite lacking. This post hopes to offer some guidance and reduce some of the frustration involved in installing …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Sun, 28 Oct 2012 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:codearcana.com,2012-10-28:/posts/2012/10/28/pai-mei-on-mac-osx-108.html</guid><category>mac osx</category><category>reverse engineering</category></item><item><title>Analysis of a Parallel Memory Allocator</title><link>http://codearcana.com/posts/2012/05/11/analysis-of-a-parallel-memory-allocator.html</link><description>&lt;p&gt;I implemented and tested different configurations of a modern parallel memory allocator.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Fri, 11 May 2012 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:codearcana.com,2012-05-11:/posts/2012/05/11/analysis-of-a-parallel-memory-allocator.html</guid><category>malloc</category></item><item><title>Securing and Exploiting Go Binaries</title><link>http://codearcana.com/posts/2012/05/06/securing-and-exploiting-go-binaries.html</link><description>&lt;p&gt;I have spent some time over the past month or so trying to use Go binaries in a secure manner and trying to exploit Go binaries and I thought it would be useful if I talked a little bit about my journey.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Sun, 06 May 2012 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:codearcana.com,2012-05-06:/posts/2012/05/06/securing-and-exploiting-go-binaries.html</guid><category>golang</category><category>exploitation</category></item><item><title>CS Theory with Make</title><link>http://codearcana.com/posts/2012/03/05/cs-theory-with-make.html</link><description>&lt;p&gt;In this post, I play around with some make functions and eventually provide a constructive proof that the make syntax is turing complete via reduction to μ-recursion.&lt;/p&gt;
&lt;p&gt;First, we have to construct numbers. I used the representation of numbers as
unary strings of the character &lt;code&gt;0&lt;/code&gt;: ie, the number 4 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Reece</dc:creator><pubDate>Mon, 05 Mar 2012 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:codearcana.com,2012-03-05:/posts/2012/03/05/cs-theory-with-make.html</guid><category>make</category><category>theory</category></item></channel></rss>