<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Code Arcana - software engineering</title><link href="https://codearcana.com/" rel="alternate"></link><link href="https://codearcana.com/feeds/software-engineering.atom.xml" rel="self"></link><id>https://codearcana.com/</id><updated>2022-03-23T00:00:00-07:00</updated><entry><title>An Ideal Platform Experience</title><link href="https://codearcana.com/posts/2022/03/23/an-ideal-platform-experience.html" rel="alternate"></link><published>2022-03-23T00:00:00-07:00</published><updated>2022-03-23T00:00:00-07:00</updated><author><name>Alex Reece</name></author><id>tag:codearcana.com,2022-03-23:/posts/2022/03/23/an-ideal-platform-experience.html</id><summary type="html">&lt;p&gt;I've thought a while about the vision for Platform orgs. In short, my opinion
is that 
Platform orgs should prioritize making an incredible user experience.
Unfortunately, they frequently target making a very customizable experience at
the expense of making an enjoyable one -- they target making AWS when they
should make …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've thought a while about the vision for Platform orgs. In short, my opinion
is that 
Platform orgs should prioritize making an incredible user experience.
Unfortunately, they frequently target making a very customizable experience at
the expense of making an enjoyable one -- they target making AWS when they
should make something easier than Heroku. The net result of this focus is that
sometimes product engineers find themselves needing and missing the 
domain expertise to configure and deploy their code, leading to frustration and 
difficulty working (and eventually, hires devops engineers to act as a professional services org and fill the gap between product engineers and tools that are too difficult to use).&lt;/p&gt;
&lt;p&gt;Below is an alternative potential vision for how
to make a great platform experience.&lt;/p&gt;
&lt;h2&gt;Edit code&lt;/h2&gt;
&lt;p&gt;Ernie the Engineer picks up a new issue from the ticket tracking system to work on. &lt;/p&gt;
&lt;p&gt;Ernie creates a new branch on their local machine, write some code, and then want to run their code. They click a button in their IDE to create an ephemeral environment deployed into staging with all the dependencies of their service, attach their IDE as a remote debugger to their code while streaming the logs back to the IDE, and open their browser pointing to their new service. Since they are attached as with a remote debugger, they can quickly edit code and have it be automatically redeployed to the remote environment.&lt;/p&gt;
&lt;p&gt;They play around with the code to get it working, add some tests, and then push a new button in their IDE to create a draft code review by pushing their code to a new branch and opening the draft in their browser. The code review tool has suggested a template for the description and suggested some authors based on what files Ernie was editing. Ernie writes the description, links to the issue from the ticket tracking system, and then publishes the code for review by other engineers.&lt;/p&gt;
&lt;p&gt;Immediately after hitting publish, the code review system quietly starts to perform tests in the background. First it builds a packaged artifact and runs unit tests, then deploys the packaged artifact to a new ephemeral environment(s) and runs a set of integration tests (and in some cases, performance tests). If something goes wrong with the build or the tests, a short snippet of the error is posted and a link to the testing tool to get more information (or re-run the test with a debugger attached) is posted on the code review. When all the tests pass, a badge appears on the code review so all reviewers can see that fact.&lt;/p&gt;
&lt;p&gt;After gathering feedback and updating the code, Ernie has the approval to merge their code. They click a button on the code review tool that adds their change to a "submit queue", where all new changes are serially rebased onto master and (if cleanly rebased) re-built and re-tested before being committed to master. If anything goes wrong, Ernie gets an email/slack notification with a link to get more information (or re-run the test with a debugger attached).&lt;/p&gt;
&lt;p&gt;Once the code is committed to master, the packaged artifact from the submit queue is rolled out to production by deploying new copies of the service and shifting traffic from the old to the new. This process is done incrementally -- monitoring key metrics for the service and rolling back automatically if there is a drop in performance. If something does go wrong, a message is sent to the team's slack channel with a short snippet from the logs, a screenshot of the monitoring dashboard, and a link to learn more (or open up a remote debugger with the core dump loaded). &lt;/p&gt;
&lt;p&gt;When the code is all deployed to production, Ernie is free to delete their old branches from the local computer and all ephemeral environments are automatically cleaned up after not being used. &lt;/p&gt;
&lt;h2&gt;Adding a new dependency&lt;/h2&gt;
&lt;p&gt;Later, Ernie wants to add a dependency on another service (i.e. have their service make an RPC call to another service). &lt;/p&gt;
&lt;p&gt;They follow the same steps as above but then hit an error when trying to run the code: the message clearly says that the service is not authorized to make the RPC call and Ernie needs to add this authorization in the service portal with a helpful link. Ernie clicks the link and encounters a form pre-populated with the names of both services and the RPC endpoint(s) being hit, an optional text box to describe why, and the ability to describe how the testing system should handle the dependency for ephemeral environments (is it ok to have all ephemeral environments share a stable copy of the dependency, or should a new ephemeral copy of the dependency be created every time an ephemeral environment is created). Ernie isn't sure, so they trust the default of sharing a stable copy of the dependency. Ernie also knows that they will need to make additional RPC calls in the future so use the pre-populated list of endpoints to add them all. After Ernie hits submit on the form, a message is pushed to the team channel of the change Ernie made and they are able to finish developing their code as normal.&lt;/p&gt;
&lt;p&gt;(Note: Ernie didn't need any additional review of this change to the service config because their team chose to prioritize speed of development and the service they are making an RPC call to has no security restrictions. If either of these were different, Ernie would have instead gotten a link to a draft code review of some infrastructure configuration files where they could get others to approve the change.)&lt;/p&gt;
&lt;h2&gt;Creating a new service&lt;/h2&gt;
&lt;p&gt;Tina the Tech Lead goes to the service registry to create a new service. &lt;/p&gt;
&lt;p&gt;She goes to a new form where she types in the name of the new service and what language the service is in. The form asks for additional information (e.g. the repository, path, etc) but it is pre-populated with reasonable defaults based on the name of the service. The form asks if it should create a new group for operating this service or if it should share the same group as an additional service. If she wants to create a new group, Tina is asked to pick the name of the group (with a reasonable default chosen based on the name of the service) and add any members she chooses. Tina has the option to add custom metrics/SLOs for the service (with reasonable defaults based on her choice language) and add databases or caches. Lastly, Tina has the option to choose if this is an automatically scaled service or if she wants to manually configure the number and type of instances on which the service is deployed.&lt;/p&gt;
&lt;p&gt;After Tina hits submit, the service registry displays a dashboard with her service, the ability to configure it (add custom metrics, add databases or cached, authorize RPC calls, and modify maintainers), and a list of all environments (currently just production and maybe staging, but eventually also all active ephemeral environments). For each environment, she can see the cost per day, some high level counters of the traffic it is receiving, and a link to get more information (e.g. the monitoring dashboard, number of instances, a list of recent deployments). Behind the scenes, the service registry has created a pager duty group, several email groups (e.g. NAME-maintainers@company.com, NAME-announce@company.com, etc), created or deployed all databases and caches, etc.&lt;/p&gt;</content><category term="platform"></category></entry><entry><title>A real Hello World example for react</title><link href="https://codearcana.com/posts/2017/01/21/a-real-hello-world-example-for-react.html" rel="alternate"></link><published>2017-01-21T00:00:00-08:00</published><updated>2017-01-21T00:00:00-08:00</updated><author><name>Alex Reece</name></author><id>tag:codearcana.com,2017-01-21:/posts/2017/01/21/a-real-hello-world-example-for-react.html</id><summary type="html">&lt;p&gt;I got frustrated following the React
&lt;a href="https://facebook.github.io/react/docs/hello-world.html"&gt;"Hello, World"&lt;/a&gt; and 
&lt;a href="https://facebook.github.io/react/tutorial/tutorial.html"&gt;tutorial&lt;/a&gt;
because of the implied magic. How does it actually work? Where does it fit
into a html page? &lt;em&gt;How do I run React locally?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The "Hello, World" has a 4 line example that does not actually work: &lt;em&gt;this&lt;/em&gt; is
the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I got frustrated following the React
&lt;a href="https://facebook.github.io/react/docs/hello-world.html"&gt;"Hello, World"&lt;/a&gt; and 
&lt;a href="https://facebook.github.io/react/tutorial/tutorial.html"&gt;tutorial&lt;/a&gt;
because of the implied magic. How does it actually work? Where does it fit
into a html page? &lt;em&gt;How do I run React locally?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The "Hello, World" has a 4 line example that does not actually work: &lt;em&gt;this&lt;/em&gt; is
the minimal react "Hello, World". If you save this to a file (e.g.
&lt;code&gt;hello_world.html&lt;/code&gt;), you will be able to open it with your favorite web
browser:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://unpkg.com/react@latest/dist/react.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://unpkg.com/react-dom@latest/dist/react-dom.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://unpkg.com/babel-standalone@latest/babel.min.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/babel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;World&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/h1&amp;gt;,&lt;/span&gt;
                                &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="react"></category><category term="helloworld"></category><category term="example"></category></entry><entry><title>Data warehousing in the modern era</title><link href="https://codearcana.com/posts/2016/07/29/data-warehousing-in-the-modern-era.html" rel="alternate"></link><published>2016-07-29T00:00:00-07:00</published><updated>2016-07-29T00:00:00-07:00</updated><author><name>Alex Reece</name></author><id>tag:codearcana.com,2016-07-29:/posts/2016/07/29/data-warehousing-in-the-modern-era.html</id><summary type="html">&lt;p&gt;Data Warehousing (DW) and Business Intelligence (BI) are a pair of concepts almost as old as databases. They spring from the need for enterprises to dig into huge amounts of data to identify business trends over time to anticipate future needs. They are inexorably linked concepts; BI refers to the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Data Warehousing (DW) and Business Intelligence (BI) are a pair of concepts almost as old as databases. They spring from the need for enterprises to dig into huge amounts of data to identify business trends over time to anticipate future needs. They are inexorably linked concepts; BI refers to the process (questions, tools, visualizations) that sifts through data to derive value and DW refers to the infrastructure (databases, schemas, and extract-transform-load (ETL) systems) needed to enable this process.&lt;/p&gt;
&lt;p&gt;The key insight to DW/BI is that the analytical queries used are &lt;em&gt;very&lt;/em&gt; resource intensive. Traditional BI workloads scan over months or years of historical data, aggregating over terabytes of data. Because of the explosive scale of the Internet of Things, modern BI workloads have to process similar quantities of information when examining much shorter time slices. For example, an oil company might need to monitor millions of sensor data points every hour to be able to predict broken drill bits in real time. In order to support such expensive BI questions, DW technology has to be incredibly sophisticated.&lt;/p&gt;
&lt;p&gt;DW gurus have many practices to enable large scale BI. Since integers are easy to store and fast to query, abstract integer identifiers or “surrogate keys” are used to identify data instead of its semantic value. Star schemas are the result of “denormalizing” many interrelated SQL tables into one fact table that references many dimension tables, allowing BI queries that were previously complicated joins of multiple tables to be a single scan of thea large “fact” table. Many columnar data stores are designed for this kind of denormalization and compress common values extremely well. To achieve sub-minute response times on BI queries without interfering with transactional workflows, ETL is used to pre-aggregate the transactional data and move it into a custom, dedicated DW. &lt;/p&gt;
&lt;p&gt;DW is at an in inflection point; as the world moves to the scale of internet of things and real time analytics, traditional DW practices need to adapt to keep up. Traditional ETL run once an hour does not capture the real time changes needed to anticipate the needs of a modern business. &lt;/p&gt;</content><category term="databases"></category></entry><entry><title>Arena "leak" in glibc</title><link href="https://codearcana.com/posts/2016/07/11/arena-leak-in-glibc.html" rel="alternate"></link><published>2016-07-11T00:00:00-07:00</published><updated>2016-07-11T00:00:00-07:00</updated><author><name>Alex Reece</name></author><id>tag:codearcana.com,2016-07-11:/posts/2016/07/11/arena-leak-in-glibc.html</id><summary type="html">&lt;p&gt;I diagnose an unexpected behavior in the glibc malloc implementation manifesting as a slow memory "leak".&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was recently working on really strange memory issue. Over the course of 1-2 weeks, memory usage of &lt;code&gt;memsqld&lt;/code&gt; increased despite no change in the amount of data stored. To make matters even more interesting, &lt;code&gt;memsqld&lt;/code&gt; keeps extremely detailed accounting of memory usage (by tracking calls to &lt;code&gt;mmap&lt;/code&gt;, &lt;code&gt;malloc&lt;/code&gt;, etc). &lt;code&gt;memsqld&lt;/code&gt;'s accounting was off, reporting that we were only use ~2-3G of memory despite actually consuming ~15G of memory. What was going on?&lt;/p&gt;
&lt;p&gt;The first thing I did was capture the output of &lt;code&gt;/proc/$PID/maps&lt;/code&gt; in the offending process and then generated a core dump so I could get &lt;code&gt;memsqld&lt;/code&gt; running again and do analysis offline. &lt;/p&gt;
&lt;p&gt;I summed up all the different types of memory using awk and noticed that the 12GB difference appeared to be coming from ~64MB regions that were mapped &lt;code&gt;rwxp&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cat proc_pid_maps &lt;span class="p"&gt;|&lt;/span&gt; gawk &lt;span class="s1"&gt;&amp;#39;{ split($1, a, &amp;quot;-&amp;quot;); b=strtonum(&amp;quot;0x&amp;quot; a[1]); e=strtonum(&amp;quot;0x&amp;quot; a[2]) } /stack/ { t=&amp;quot;stack&amp;quot;; } /heap/ { t=&amp;quot;heap&amp;quot;; } /\.so/ { t=&amp;quot;so&amp;quot; } /\.mu/ { t=&amp;quot;mu&amp;quot; } /\.mo/ { t=&amp;quot;mo&amp;quot;; }  (!t) { $1 = &amp;quot;&amp;quot;; t=$0} { print e-b &amp;quot; &amp;quot; t ; t=&amp;quot;&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{ s=$1; $1=&amp;quot;&amp;quot;; b[$0] += s; c[$0] += 1 } END { print &amp;quot;bytes count type&amp;quot;; for (t in b) { print b[t] &amp;quot; &amp;quot; c[t] &amp;quot; &amp;quot; t } }&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort -nk 1

&lt;span class="go"&gt;bytes count type&lt;/span&gt;
&lt;span class="go"&gt;4096 1  r-xp 00000000 00:00 0 [vsyscall]&lt;/span&gt;
&lt;span class="go"&gt;8192 1  r--p 00000000 00:00 0 [vvar]&lt;/span&gt;
&lt;span class="go"&gt;8192 1  r-xp 00000000 00:00 0 [vdso]&lt;/span&gt;
&lt;span class="go"&gt;8192 1  r-xp 00000000 ca:3400 262148 /data/logs/sharding_log_0&lt;/span&gt;
&lt;span class="go"&gt;20480 1  r-xp 00000000 ca:3400 262166 /data/logs/app_old_log_0&lt;/span&gt;
&lt;span class="go"&gt;73728 1  r-xp 00000000 ca:3400 262157 /data/logs/app_log_0&lt;/span&gt;
&lt;span class="go"&gt;499712 1  r-xp 00000000 00:42 86 /memsqlbin/lib/interp_ops.bc&lt;/span&gt;
&lt;span class="go"&gt;4460544 125  mo&lt;/span&gt;
&lt;span class="go"&gt;4796416 1  rwxp 02085000 00:42 51 /memsqlbin/memsqld&lt;/span&gt;
&lt;span class="go"&gt;6656000 242  r-xp 00000000 00:00 0&lt;/span&gt;
&lt;span class="go"&gt;8245248 89  mu&lt;/span&gt;
&lt;span class="go"&gt;34103296 1  r-xp 00000000 00:42 51 /memsqlbin/memsqld&lt;/span&gt;
&lt;span class="go"&gt;55984128 81  so&lt;/span&gt;
&lt;span class="go"&gt;375599104 1  heap&lt;/span&gt;
&lt;span class="go"&gt;1515778048 1037  ---p 00000000 00:00 0&lt;/span&gt;
&lt;span class="go"&gt;2380578816 871  stack&lt;/span&gt;
&lt;span class="go"&gt;12578443264 359  rwxp 00000000 00:00 0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Using &lt;code&gt;perf&lt;/code&gt; to trace &lt;code&gt;mmap&lt;/code&gt;s&lt;/h2&gt;
&lt;p&gt;I wanted to see who was allocating these large regions, so I used &lt;code&gt;perf&lt;/code&gt; to record a stack trace any time the &lt;code&gt;memsqld&lt;/code&gt; process &lt;code&gt;mmap&lt;/code&gt;ed a region of memory greater than 60MB in length&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo perf record -g -e syscalls:sys_enter_mmap --filter &lt;span class="s1"&gt;&amp;#39;len &amp;gt; 60000000&amp;#39;&lt;/span&gt; --pid &lt;span class="nv"&gt;$PID_OF_MEMSQL&lt;/span&gt; -o /path/to/storage -- sleep &lt;span class="nv"&gt;$2&lt;/span&gt;_DAYS_IN_SECONDS
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unfortunately, this proved to be useless -- since &lt;code&gt;libc&lt;/code&gt; on Linux is typically compiled without frame pointers, the stack traces we got were &lt;em&gt;very&lt;/em&gt; short:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;memsqld   531 [003] 3033773.536620: syscalls:sys_enter_mmap: addr: 0x00000000, len: 0x08000000, prot: 0x00000000, flags: 0x00004022, fd: 0xffffffff, off: 0x00000000
        7fb0a4d6297a mmap64 (/lib/x86_64-linux-gnu/libc-2.19.so)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I figured I'd use &lt;code&gt;perf probe&lt;/code&gt; to trace the &lt;code&gt;mmap64&lt;/code&gt; library call boundary so I could see the stacks, but unfortunately, this didn't work inside docker&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;root@memsql-leaf-1-2649458094-nz33q:/data/areece#&lt;/span&gt; perf probe /lib/x86_64-linux-gnu/libc-2.19.so mmap64 &lt;span class="s1"&gt;&amp;#39;len=%si&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;Probe point &amp;#39;mmap64&amp;#39; not found.&lt;/span&gt;
&lt;span class="go"&gt;  Error: Failed to add events.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;A lucky guess&lt;/h2&gt;
&lt;p&gt;Going back to the drawing board, I looked at the data in the core dump. When I looked at the memory near those 64MB sections, I noticed that the contents looked heap-ish:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) x/100a 0x7f8f98000000
0x7f8f98000000: 0x7f8f98000020  0x0
0x7f8f98000010: 0x3e27000   0x4000000
0x7f8f98000020: 0x200000000 0x7f8f980fa580
0x7f8f98000030: 0x0 0x7f8f9a6646e0
0x7f8f98000040: 0x7f8f9ab025f0  0x0
0x7f8f98000050: 0x0 0x0
0x7f8f98000060: 0x0 0x0
0x7f8f98000070: 0x0 0x7f8f9be069e0
0x7f8f98000080: 0x7f8f9bdda2a0  0x7f8f9bdd9fb0
0x7f8f98000090: 0x7f8f9bdc3210  0x7f8f980910f0
0x7f8f980000a0: 0x7f8f980a4cb0  0x7f8f99678920
0x7f8f980000b0: 0x7f8f9aad0b90  0x7f8f98104070
0x7f8f980000c0: 0x7f8f98057370  0x7f8f9a649470
0x7f8f980000d0: 0x7f8f9aac2df0  0x7f8f9808e630
0x7f8f980000e0: 0x7f8f9a66e920  0x7f8f996222a0
0x7f8f980000f0: 0x7f8f9bce28e0  0x7f8f9ab89030
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Furthermore, the permissions on these pages matched the permissions on our heap:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0345b000-098c0000 rwxp 00000000 00:00 0                                  [heap]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I looked for ways to introspect the &lt;code&gt;glibc&lt;/code&gt; heap and found &lt;code&gt;malloc_stats(3)&lt;/code&gt;. Sure enough, this revealed the issue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; gdb --batch --pid &lt;span class="m"&gt;6&lt;/span&gt; --ex &lt;span class="s1"&gt;&amp;#39;call malloc_stats()&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;Arena 0:&lt;/span&gt;
&lt;span class="go"&gt;system bytes     =  157237248&lt;/span&gt;
&lt;span class="go"&gt;in use bytes     =   82474432&lt;/span&gt;
&lt;span class="go"&gt;Arena 1:&lt;/span&gt;
&lt;span class="go"&gt;system bytes     =  245886976&lt;/span&gt;
&lt;span class="go"&gt;in use bytes     =    4931712&lt;/span&gt;
&lt;span class="go"&gt;Arena 2:&lt;/span&gt;
&lt;span class="go"&gt;system bytes     =  191258624&lt;/span&gt;
&lt;span class="go"&gt;in use bytes     =    3757776&lt;/span&gt;
&lt;span class="go"&gt;Arena 3:&lt;/span&gt;
&lt;span class="go"&gt;system bytes     =  187617280&lt;/span&gt;
&lt;span class="go"&gt;in use bytes     =    1905632&lt;/span&gt;
&lt;span class="go"&gt;... &amp;lt;snip&amp;gt; &lt;/span&gt;
&lt;span class="go"&gt;Arena 63:&lt;/span&gt;
&lt;span class="go"&gt;system bytes     =  274530304&lt;/span&gt;
&lt;span class="go"&gt;in use bytes     =    1173504&lt;/span&gt;
&lt;span class="go"&gt;Total (incl. mmap):&lt;/span&gt;
&lt;span class="go"&gt;system bytes     = 3299606528&lt;/span&gt;
&lt;span class="go"&gt;in use bytes     =  645742704&lt;/span&gt;
&lt;span class="go"&gt;max mmap regions =       1086&lt;/span&gt;
&lt;span class="go"&gt;max mmap bytes   =  456876032&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(ignore the total – &lt;code&gt;glibc&lt;/code&gt; uses a 32bit counter for total bytes which overflowed. The correct sum of each arena &lt;code&gt;system_bytes&lt;/code&gt; is 14GB)&lt;/p&gt;
&lt;p&gt;Turns out these regions are the product of a &lt;code&gt;glibc&lt;/code&gt; &lt;code&gt;malloc&lt;/code&gt; feature: &lt;a href="https://siddhesh.in/posts/malloc-per-thread-arenas-in-glibc.html"&gt;per thread arenas&lt;/a&gt;. An arena is a self contained portion of the heap
from which memory can be allocated; each arena is completely independent of the other arenas. The &lt;code&gt;glibc&lt;/code&gt; &lt;code&gt;malloc&lt;/code&gt; implementation attempted to improve performance by allowing all threads to use their own arena (up to a default cap &lt;code&gt;MALLOC_ARENA_MAX&lt;/code&gt; of 8 arenas per CPU core). When a thread goes to allocate memory, it tries to exclusively lock the arena it allocated from most recently; however, upon failing, the thread will switch to another arena or create a new arena if all arenas are busy. &lt;/p&gt;
&lt;p&gt;For applications with a small number of threads that use &lt;code&gt;malloc&lt;/code&gt; heavily, this approach works well. Unfortunately, &lt;code&gt;memsqld&lt;/code&gt; uses &lt;code&gt;malloc&lt;/code&gt; very sparingly but uses a large number of threads; in this workload, we had managed to induce a pathology where we had 64 malloc arenas that were using only ~1% of about ~200MB of system memory for user data, a huge waste of memory. Fortunately, the "fix" is simple –- we set the maximum number of arenas back down to one per core by setting the &lt;code&gt;MALLOC_ARENA_MAX&lt;/code&gt; environment variable appropriately.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;I found the name of the filter arguments via &lt;code&gt;cat /sys/kernel/debug/tracing/events/syscalls/sys_enter_mmap/format&lt;/code&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;I suspect that &lt;code&gt;perf probe&lt;/code&gt; interacts poorly with Linux filesystem namespaces; has anyone played around here before?&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="glibc"></category><category term="perf_events"></category><category term="malloc"></category><category term="Linux"></category></entry><entry><title>Statically linking libstdc++</title><link href="https://codearcana.com/posts/2015/12/09/statically-linking-libstdc.html" rel="alternate"></link><published>2015-12-09T00:00:00-08:00</published><updated>2015-12-09T00:00:00-08:00</updated><author><name>Alex Reece</name></author><id>tag:codearcana.com,2015-12-09:/posts/2015/12/09/statically-linking-libstdc.html</id><summary type="html">&lt;p&gt;In this post, I statically link &lt;code&gt;libstdc++&lt;/code&gt; into a &lt;code&gt;configure&lt;/code&gt;d library.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently found myself wanting to statically link &lt;code&gt;libstdc++&lt;/code&gt; into a 
library I was compiling and found it to be a surprising challenging process.&lt;/p&gt;
&lt;h2&gt;Small example library&lt;/h2&gt;
&lt;p&gt;I first started playing with a small example library:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="n"&gt;__attribute__&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;noinline&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;__FILE__&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;__func__&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before I even got to statically compiling &lt;code&gt;libstdc++&lt;/code&gt;, I noticed something
strange: The symbol &lt;code&gt;bar&lt;/code&gt; was getting resolved through the PLT!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; gcc -O3 -shared -fPIC foo.cpp -o foo.so
&lt;span class="gp"&gt;$&lt;/span&gt; gdb foo.so --batch --ex &lt;span class="s2"&gt;&amp;quot;disas foo&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;Dump of assembler code for function _Z3foov:&lt;/span&gt;
&lt;span class="go"&gt;   0x0000000000000b70 &amp;lt;+0&amp;gt;: push   %rbp&lt;/span&gt;
&lt;span class="go"&gt;   0x0000000000000b71 &amp;lt;+1&amp;gt;: push   %rbx&lt;/span&gt;
&lt;span class="go"&gt;   0x0000000000000b72 &amp;lt;+2&amp;gt;: sub    $0x8,%rsp&lt;/span&gt;
&lt;span class="go"&gt;   0x0000000000000b76 &amp;lt;+6&amp;gt;: callq  0x960 &amp;lt;_Z3barv@plt&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;... &amp;lt;snip&amp;gt; ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I played around with a couple of things, and eventualy figured out I could
mark &lt;code&gt;bar&lt;/code&gt; as having hidden visibility and then it wouldn't use this PLT.&lt;/p&gt;
&lt;h2&gt;Static &lt;code&gt;libstdc++&lt;/code&gt;?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;g++&lt;/code&gt; has a command line option &lt;code&gt;-static-libstdc++&lt;/code&gt; which appears to do
exactly what I want. Unfortunately, the calls to the &lt;code&gt;libstdc++&lt;/code&gt; symbols 
are resolved via the PLT, as above with &lt;code&gt;bar&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; gcc -static-libstdc++ -O3 -shared -fPIC foo.cpp -o foo.so
&lt;span class="gp"&gt;$&lt;/span&gt; /tmp% gdb foo.so --batch --ex &lt;span class="s2"&gt;&amp;quot;disas foo&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;   0x0000000000000b21 &amp;lt;+1&amp;gt;: push   %rbx&lt;/span&gt;
&lt;span class="go"&gt;   0x0000000000000b22 &amp;lt;+2&amp;gt;: sub    $0x8,%rsp&lt;/span&gt;
&lt;span class="go"&gt;   0x0000000000000b26 &amp;lt;+6&amp;gt;: callq  0xa80 &amp;lt;_Z3barv&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;   0x0000000000000b2b &amp;lt;+11&amp;gt;:  mov    0x20049e(%rip),%rbx        # 0x200fd0&lt;/span&gt;
&lt;span class="go"&gt;   0x0000000000000b32 &amp;lt;+18&amp;gt;:  lea    0x7a(%rip),%rsi        # 0xbb3&lt;/span&gt;
&lt;span class="go"&gt;   0x0000000000000b39 &amp;lt;+25&amp;gt;:  mov    $0x5,%edx&lt;/span&gt;
&lt;span class="go"&gt;   0x0000000000000b3e &amp;lt;+30&amp;gt;:  mov    %rbx,%rdi&lt;/span&gt;
&lt;span class="go"&gt;   0x0000000000000b41 &amp;lt;+33&amp;gt;:  callq  0x930 &amp;lt;_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;... &amp;lt;snip&amp;gt; ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I tried to do a cute trick to make all the C++ functions have hidden
visibility:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#pragma GCC visibility push(hidden)&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#pragme GCC visibility pop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unfortunately, the symbols were &lt;em&gt;still&lt;/em&gt; resolved via the PLT. What was going on?
Could I force &lt;code&gt;g++&lt;/code&gt; to just use the symbols in the binary it had a copy of rather
than using the PLT?&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;Bsymbolic-functions&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Some deep soul searching lead me to
&lt;a href="http://stackoverflow.com/q/7216973"&gt;a stack overflow post&lt;/a&gt; where someone else
had the same questions and talked about a flag that solved this exact problem.
This allowed me to get rid of the visiblity annotation on &lt;code&gt;bar&lt;/code&gt;, but it still didn't
solve my libstdc++ problem.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; gcc -static-libstdc++ -Wl,-Bsymbolic-functions -O3 -shared -fPIC foo.cpp -o foo.so
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I eventually found the real issue: library order during linking. If I manually
specified the &lt;code&gt;libstc++.a&lt;/code&gt; library as the last library, the symbols would not
be resolved via the plt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; gcc -static-libstdc++ -Wl,-Bsymbolic-functions -O3 -shared -fPIC foo.cpp -o foo.so &lt;span class="k"&gt;$(&lt;/span&gt;g++ &lt;span class="nv"&gt;$CXXFLAGS&lt;/span&gt; -print-file-name&lt;span class="o"&gt;=&lt;/span&gt;libstdc++.a&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; gdb foo.so --batch --ex &lt;span class="s2"&gt;&amp;quot;disas foo&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;Dump of assembler code for function _Z3foov:&lt;/span&gt;
&lt;span class="go"&gt;   0x00000000000422e0 &amp;lt;+0&amp;gt;: push   %rbp&lt;/span&gt;
&lt;span class="go"&gt;   0x00000000000422e1 &amp;lt;+1&amp;gt;: push   %rbx&lt;/span&gt;
&lt;span class="go"&gt;   0x00000000000422e2 &amp;lt;+2&amp;gt;: sub    $0x8,%rsp&lt;/span&gt;
&lt;span class="go"&gt;   0x00000000000422e6 &amp;lt;+6&amp;gt;: callq  0x42240 &amp;lt;_Z3barv&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;   0x00000000000422eb &amp;lt;+11&amp;gt;:  mov    0x2756ae(%rip),%rbx        # 0x2b79a0&lt;/span&gt;
&lt;span class="go"&gt;   0x00000000000422f2 &amp;lt;+18&amp;gt;:  lea    0x518ef(%rip),%rsi        # 0x93be8&lt;/span&gt;
&lt;span class="go"&gt;   0x00000000000422f9 &amp;lt;+25&amp;gt;:  mov    $0x5,%edx&lt;/span&gt;
&lt;span class="go"&gt;   0x00000000000422fe &amp;lt;+30&amp;gt;:  mov    %rbx,%rdi&lt;/span&gt;
&lt;span class="go"&gt;   0x0000000000042301 &amp;lt;+33&amp;gt;:  callq  0x45670 &amp;lt;_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;... &amp;lt;snip&amp;gt; ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Specifing this static &lt;code&gt;libstdc++.a&lt;/code&gt; as a final arg worked with both the
&lt;code&gt;#pragma GCC visibility push(hidden)&lt;/code&gt; trick and with &lt;code&gt;-Bsymbolic-functions&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;In &lt;code&gt;./configure&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;I had a &lt;code&gt;./configure&lt;/code&gt; library that I wanted to build with a static &lt;code&gt;libstdc++&lt;/code&gt;. Using
what I learned above, this seemed relatively straightforward:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;./configure CXXFLAGS=&amp;quot;-static-libstc++&amp;quot; LDFLAGS=&amp;quot;-Bsymbolic-functions&amp;quot; LIBS=&amp;quot;$(g++ -print-file-name=libstdc++.a)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unfortunately, this didn't work. Using &lt;code&gt;make VERBOSE=1&lt;/code&gt;, I looked at the
command used to link my library and saw the issue: &lt;code&gt;make&lt;/code&gt; was calling
&lt;code&gt;gcc&lt;/code&gt; to link the library rather than &lt;code&gt;ld&lt;/code&gt; but wasn't wrapping &lt;code&gt;LDFLAGS&lt;/code&gt;.
I did so manually and got my expected results, a static &lt;code&gt;libstdc++&lt;/code&gt; where 
none of the symbols were resolved using the PLT. My final &lt;code&gt;configure&lt;/code&gt;
invocation was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;./configure CXXFLAGS=&amp;quot;-static-libstc++&amp;quot; LDFLAGS=&amp;quot;-Wl,-Bsymbolic-functions&amp;quot; LIBS=&amp;quot;$(g++ -print-file-name=libstdc++.a)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="linking"></category><category term="gcc"></category></entry><entry><title>gdb breakpoint commands and conditional breakpoints</title><link href="https://codearcana.com/posts/2015/05/16/gdb-breakpoint-commands-and-conditional-breakpoints.html" rel="alternate"></link><published>2015-05-16T00:00:00-07:00</published><updated>2015-05-16T00:00:00-07:00</updated><author><name>Alex Reece</name></author><id>tag:codearcana.com,2015-05-16:/posts/2015/05/16/gdb-breakpoint-commands-and-conditional-breakpoints.html</id><summary type="html">&lt;p&gt;During my first week at my new job, I had the opportunity to teach some of my new coworkers about &lt;code&gt;gdb&lt;/code&gt; breakpoint commands and conditional breakpoints. I had a lot of fun teaching these techniques my friends here and thought others might find the story enjoyable as well.&lt;/p&gt;
&lt;h2&gt;Breakpoint commands …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;During my first week at my new job, I had the opportunity to teach some of my new coworkers about &lt;code&gt;gdb&lt;/code&gt; breakpoint commands and conditional breakpoints. I had a lot of fun teaching these techniques my friends here and thought others might find the story enjoyable as well.&lt;/p&gt;
&lt;h2&gt;Breakpoint commands&lt;/h2&gt;
&lt;p&gt;The first question I had was: &lt;em&gt;where is our server doing reads&lt;/em&gt;? To answer this question, I used an often overlooked feature of &lt;code&gt;gdb&lt;/code&gt;: breakpoint commands. At a high level, these allowed us to run an arbitrary set of &lt;code&gt;gdb&lt;/code&gt; command automatically when a break point is hit. In my case, I wanted to see what stack trace was causing the reads:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) break read
Breakpoint 2 at 0x7ffff7382960: file ../sysdeps/unix/syscall-template.S, line 82.
(gdb) commands
End with a line saying just &amp;quot;end&amp;quot;.
&amp;gt;backtrace
&amp;gt;continue
&amp;gt;end
(gdb)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I put a breakpoint on the &lt;code&gt;libc&lt;/code&gt; &lt;code&gt;read&lt;/code&gt; function call and automatically do two things: print the backtrace of the thread that hit the read and then continue execution. The overall effect of this is that &lt;code&gt;gdb&lt;/code&gt; runs the program as normal but prints a backtrace every time the program reads:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Breakpoint 1, read () at ../sysdeps/unix/syscall-template.S:82
82 ../sysdeps/unix/syscall-template.S: No such file or directory.
#0  read () at ../sysdeps/unix/syscall-template.S:82
#1  0x00007ffff7324ed8 in _IO_new_file_underflow (fp=0x7ffff76386c0)
    at fileops.c:606
#2  0x00007ffff73265be in _IO_default_uflow (fp=0x0) at genops.c:440
#3  0x00007ffff731da9b in _IO_getc (fp=0x7ffff76386c0) at getc.c:41
#4  0x00007ffff7b6e63d in __gnu_cxx::stdio_sync_filebuf&amp;lt;char, std::char_traits&amp;lt;char&amp;gt; &amp;gt;::underflow() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#5  0x00007ffff7b58c17 in std::istream::sentry::sentry(std::istream&amp;amp;, bool) ()
   from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#6  0x00007ffff7b59b4b in std::istream::operator&amp;gt;&amp;gt;(int&amp;amp;) ()
   from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#7  0x0000000000400905 in main ()
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conditional breakpoints&lt;/h2&gt;
&lt;p&gt;I also noticed it was opening an interesting file, so I wanted break into a debugger to inspect the program to figure out why. Unfortunately, it opens a &lt;em&gt;lot&lt;/em&gt; of files (logs, etc), so I needed a way to filter out only the interesting calls to &lt;code&gt;open&lt;/code&gt;. To do this, I used &lt;code&gt;gdb&lt;/code&gt; conditional breakpoints. The example below creates a breakpoint on &lt;code&gt;open&lt;/code&gt; that only triggers if &lt;code&gt;/home/alex&lt;/code&gt; is a substring in the filename:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;(gdb) break open if strstr(&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;rdi&lt;/span&gt;&lt;span class="x"&gt;, &amp;quot;/home/alex&amp;quot;)&lt;/span&gt;
&lt;span class="x"&gt;Breakpoint 1 at 0x7ffff7382770: file ../sysdeps/unix/syscall-template.S, line 82.&lt;/span&gt;
&lt;span class="x"&gt;(gdb) continue&lt;/span&gt;
&lt;span class="x"&gt;Breakpoint 1, open64 () at ../sysdeps/unix/syscall-template.S:82&lt;/span&gt;
&lt;span class="x"&gt;82 ../sysdeps/unix/syscall-template.S: No such file or directory.&lt;/span&gt;
&lt;span class="x"&gt;(gdb) x/s &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;rdi&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;0x400b7c:  &amp;quot;/home/alex/a.out&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This example takes advantage of two more pieces of &lt;code&gt;gdb&lt;/code&gt; functionality:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gdb&lt;/code&gt; can call an arbitrary function (in this case, we call the &lt;code&gt;libc&lt;/code&gt; &lt;code&gt;strstr&lt;/code&gt; function to compute substring).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gdb&lt;/code&gt; can directly access the values of register and then cast them to common C types (in this case, &lt;code&gt;$rdi&lt;/code&gt; is the first argument, which we know is a &lt;code&gt;char *&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Putting it all together&lt;/h2&gt;
&lt;p&gt;We can use these tricks together to get ad-hoc dynamic tracing of our server!&lt;/p&gt;
&lt;p&gt;This logs the filename and the stack trace from any open call that isn't to our log directory, but otherwise runs the server as normal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;(gdb) break open if !strstr(&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;rdi&lt;/span&gt;&lt;span class="x"&gt;, &amp;quot;/var/log&amp;quot;)&lt;/span&gt;
&lt;span class="x"&gt;(gdb) commands&lt;/span&gt;
&lt;span class="x"&gt;End with a line saying just &amp;quot;end&amp;quot;.&lt;/span&gt;
&lt;span class="x"&gt;&amp;gt;print/s &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;rdi&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;gt;backtrace&lt;/span&gt;
&lt;span class="x"&gt;&amp;gt;continue&lt;/span&gt;
&lt;span class="x"&gt;&amp;gt;end&lt;/span&gt;
&lt;span class="x"&gt;(gdb) continue&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="gdb"></category><category term="conditional breakpoint"></category><category term="breakpoint commands"></category></entry><entry><title>Compiling with libtool on OmniOS</title><link href="https://codearcana.com/posts/2014/04/30/compiling-with-libtool-on-omnios.html" rel="alternate"></link><published>2014-04-30T00:00:00-07:00</published><updated>2014-04-30T00:00:00-07:00</updated><author><name>Alex Reece</name></author><id>tag:codearcana.com,2014-04-30:/posts/2014/04/30/compiling-with-libtool-on-omnios.html</id><summary type="html">&lt;p&gt;I'm having issues compiling glib2.40.0 (a libtool compiled shared library) on Omnios.&lt;/p&gt;
&lt;p&gt;In particular, my shared library has a static initializer that does not get executed by the libtool linked library. I've reduced this to the test case below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;__attribute__&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;myctor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;in …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I'm having issues compiling glib2.40.0 (a libtool compiled shared library) on Omnios.&lt;/p&gt;
&lt;p&gt;In particular, my shared library has a static initializer that does not get executed by the libtool linked library. I've reduced this to the test case below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;__attribute__&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;myctor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;in myctor&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I can compile with libtool and link with gcc, and get the expected behavior on LD_PRELOAD:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; libtool --mode&lt;span class="o"&gt;=&lt;/span&gt;compile gcc -c myctor.c
&lt;span class="go"&gt;libtool: compile:  gcc -c myctor.c  -fPIC -DPIC -o .libs/myctor.o&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; gcc -shared .libs/myctor.o -o libmyctor.so
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nv"&gt;LD_PRELOAD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;/libmyctor.so ls
&lt;span class="go"&gt;in myctor&lt;/span&gt;
&lt;span class="go"&gt;libmyctor.so  myctor.c      myctor.lo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If I link with libtool, I do not get the expected behavior:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; libtool --mode&lt;span class="o"&gt;=&lt;/span&gt;link gcc -o libmyctor.la  -rpath /usr/lib myctor.lo
&lt;span class="go"&gt;libtool: link: gcc -shared  -fPIC -DPIC -Wl,-z -Wl,text -Wl,-h -Wl,libmyctor.so.0 -o .libs/libmyctor.so.0.0.0  .libs/myctor.o      -nostdlib -lc&lt;/span&gt;
&lt;span class="go"&gt;libtool: link: (cd &amp;quot;.libs&amp;quot; &amp;amp;&amp;amp; rm -f &amp;quot;libmyctor.so.0&amp;quot; &amp;amp;&amp;amp; ln -s &amp;quot;libmyctor.so.0.0.0&amp;quot; &amp;quot;libmyctor.so.0&amp;quot;)&lt;/span&gt;
&lt;span class="go"&gt;libtool: link: (cd &amp;quot;.libs&amp;quot; &amp;amp;&amp;amp; rm -f &amp;quot;libmyctor.so&amp;quot; &amp;amp;&amp;amp; ln -s &amp;quot;libmyctor.so.0.0.0&amp;quot; &amp;quot;libmyctor.so&amp;quot;)&lt;/span&gt;
&lt;span class="go"&gt;libtool: link: ( cd &amp;quot;.libs&amp;quot; &amp;amp;&amp;amp; rm -f &amp;quot;libmyctor.la&amp;quot; &amp;amp;&amp;amp; ln -s &amp;quot;../libmyctor.la&amp;quot; &amp;quot;libmyctor.la&amp;quot; )&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nv"&gt;LD_PRELOAD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;/.libs/libmyctor.so.0.0.0 ls
&lt;span class="go"&gt;libmyctor.la  libmyctor.so  myctor.c      myctor.lo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I performed some trial and error experiments with the displayed gcc command invocation, and determined that "-nostdlib" is the flag that causes the constructor to no longer be called:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; gcc -shared  -fPIC -DPIC -Wl,-z -Wl,text -Wl,-h -Wl,libmyctor.so.0 -o .libs/libmyctor.so.0.0.0  .libs/myctor.o
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nv"&gt;LD_PRELOAD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;/.libs/libmyctor.so.0.0.0 ls
&lt;span class="go"&gt;in myctor&lt;/span&gt;
&lt;span class="go"&gt;libmyctor.la  libmyctor.so  myctor.c      myctor.lo&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt; gcc -shared  -fPIC -DPIC -Wl,-z -Wl,text -Wl,-h -Wl,libmyctor.so.0 -o .libs/libmyctor.so.0.0.0  .libs/myctor.o      -nostdlib -lc
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nv"&gt;LD_PRELOAD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;/.libs/libmyctor.so.0.0.0
&lt;span class="go"&gt;libmyctor.la  libmyctor.so  myctor.c      myctor.lo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Illumos / Solaris has its own peculiarities for static initializers (&lt;a href="https://blogs.oracle.com/ahl/entry/the_mysteries_of_init"&gt;https://blogs.oracle.com/ahl/entry/the_mysteries_of_init&lt;/a&gt; was a helpful blogpost). The ".init" section for the gcc linked library has the expected contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; dis -t .init libmyctor.so
&lt;span class="go"&gt;disassembly for libmyctor.so&lt;/span&gt;


&lt;span class="go"&gt;section .init&lt;/span&gt;
&lt;span class="go"&gt;_init()&lt;/span&gt;
&lt;span class="go"&gt;    _init:      55                 pushl  %ebp&lt;/span&gt;
&lt;span class="go"&gt;    _init+0x1:  89 e5              movl   %esp,%ebp&lt;/span&gt;
&lt;span class="go"&gt;    _init+0x3:  83 e4 f0           andl   $0xfffffff0,%esp&lt;/span&gt;
&lt;span class="go"&gt;    _init+0x6:  83 ec 0c           subl   $0xc,%esp&lt;/span&gt;
&lt;span class="go"&gt;    _init+0x9:  53                 pushl  %ebx&lt;/span&gt;
&lt;span class="go"&gt;    _init+0xa:  e8 00 00 00 00     call   +0x0  &amp;lt;_init+0xf&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;    _init+0xf:  5b                 popl   %ebx&lt;/span&gt;
&lt;span class="go"&gt;    _init+0x10: 81 c3 49 00 01 00  addl   $0x10049,%ebx&lt;/span&gt;
&lt;span class="go"&gt;    _init+0x16: e8 35 ff ff ff     call   -0xcb &amp;lt;frame_dummy&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;    _init+0x1b: e8 a0 ff ff ff     call   -0x60 &amp;lt;__do_global_ctors_aux&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;    _init+0x20: 5b                 popl   %ebx&lt;/span&gt;
&lt;span class="go"&gt;    _init+0x21: c9                 leave  &lt;/span&gt;
&lt;span class="go"&gt;    _init+0x22: c3                 ret&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But the ".init" section for the libtool linked library doesn't exist&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; dis -t .init .libs/libmyctor.so
&lt;span class="go"&gt;disassembly for .libs/libmyctor.so&lt;/span&gt;

&lt;span class="go"&gt;dis: warning: failed to find section &amp;#39;.init&amp;#39; in &amp;#39;.libs/libmyctor.so&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Digging a bit deeper (and reading that blog post), I see that I need to add &lt;code&gt;/usr/lib/crti.o&lt;/code&gt; and &lt;code&gt;/usr/lib/crtn.o&lt;/code&gt;. If I add these to the command line, I get an ".init" section that seems to be only partially complete:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;section .init&lt;/span&gt;
&lt;span class="go"&gt;_init()&lt;/span&gt;
&lt;span class="go"&gt;    _init:      55                 pushl  %ebp&lt;/span&gt;
&lt;span class="go"&gt;    _init+0x1:  89 e5              movl   %esp,%ebp&lt;/span&gt;
&lt;span class="go"&gt;    _init+0x3:  83 e4 f0           andl   $0xfffffff0,%esp&lt;/span&gt;
&lt;span class="go"&gt;    _init+0x6:  83 ec 0c           subl   $0xc,%esp&lt;/span&gt;
&lt;span class="go"&gt;    _init+0x9:  53                 pushl  %ebx&lt;/span&gt;
&lt;span class="go"&gt;    _init+0xa:  e8 00 00 00 00     call   +0x0  &amp;lt;_init+0xf&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;    _init+0xf:  5b                 popl   %ebx&lt;/span&gt;
&lt;span class="go"&gt;    _init+0x10: 81 c3 31 00 01 00  addl   $0x10031,%ebx&lt;/span&gt;
&lt;span class="go"&gt;    _init+0x16: 5b                 popl   %ebx&lt;/span&gt;
&lt;span class="go"&gt;    _init+0x17: c9                 leave  &lt;/span&gt;
&lt;span class="go"&gt;    _init+0x18: c3                 ret&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The problem is that we also need to pass some gcc artifacts (&lt;code&gt;/opt/gcc-4.8.1/lib/gcc/i386-pc-solaris2.11/4.8.1/crt{begin,end}.o&lt;/code&gt;) to get this to work. If I add all the relevant artifacts, I can get the constructor to behave correctly with &lt;code&gt;-nostdlib&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; gcc -shared -nostdlib -lc -lgcc -lgcc_s /usr/lib/crti.o  /opt/gcc-4.8.1/lib/gcc/i386-pc-solaris2.11/4.8.1/crtbegin.o .libs/myctor.o /opt/gcc-4.8.1/lib/gcc/i386-pc-solaris2.11/4.8.1/crtend.o /usr/lib/crtn.o -o libmyctor.so
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nv"&gt;LD_PRELOAD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;/libmyctor.so ls
&lt;span class="go"&gt;in myctor&lt;/span&gt;
&lt;span class="go"&gt;libmyctor.so  myctor.c      myctor.lo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fortunately, this all turns out to be unnecessary - a good spot by Rich Lowe turned up some voodoo in the omnios build infrastructure: the &lt;code&gt;-nostdlib&lt;/code&gt; was inexplicably added to the libtool options &lt;a href="https://github.com/omniti-labs/omnios-build/commit/16fdea8b57a52d74876606d6b118b50753603395"&gt;"glib2 -nostdlib"&lt;/a&gt; (For more fun, check out &lt;a href="https://github.com/omniti-labs/omnios-build/commit/18800320ec1119aab568efc72f50c3689e30c687"&gt;"generic libtool unfucking support"&lt;/a&gt;). Removing this allows us to compile our library with the expected behavior.&lt;/p&gt;</content><category term="libtool"></category><category term="omnios"></category></entry><entry><title>My zsh theme</title><link href="https://codearcana.com/posts/2013/06/11/my-zsh-theme.html" rel="alternate"></link><published>2013-06-11T00:00:00-07:00</published><updated>2013-06-11T00:00:00-07:00</updated><author><name>Alex Reece</name></author><id>tag:codearcana.com,2013-06-11:/posts/2013/06/11/my-zsh-theme.html</id><summary type="html">&lt;p&gt;I spent some time this week switching from &lt;code&gt;bash&lt;/code&gt; to &lt;code&gt;zsh&lt;/code&gt; (I really enjoy
&lt;code&gt;zsh&lt;/code&gt; - I treat it as &lt;code&gt;bash&lt;/code&gt; with floating point arithmetic and other
niceities)
and making a theme for
&lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;&lt;code&gt;oh-my-zsh&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/sorin-ionescu/prezto"&gt;&lt;code&gt;prezto&lt;/code&gt;&lt;/a&gt;
for myself. I'm not quite done, but I am pretty pleased with
the results. &lt;/p&gt;
&lt;p&gt;It …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I spent some time this week switching from &lt;code&gt;bash&lt;/code&gt; to &lt;code&gt;zsh&lt;/code&gt; (I really enjoy
&lt;code&gt;zsh&lt;/code&gt; - I treat it as &lt;code&gt;bash&lt;/code&gt; with floating point arithmetic and other
niceities)
and making a theme for
&lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;&lt;code&gt;oh-my-zsh&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/sorin-ionescu/prezto"&gt;&lt;code&gt;prezto&lt;/code&gt;&lt;/a&gt;
for myself. I'm not quite done, but I am pretty pleased with
the results. &lt;/p&gt;
&lt;p&gt;It differs from most themes in the following ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Explicitly not having git or other version control info in the prompt (I very rarely don't know what branch I am in and when I care about the status of git, I usually care about which files are affected).&lt;/li&gt;
&lt;li&gt;Showing the execution time and status of the last command executed.&lt;/li&gt;
&lt;li&gt;Displaying a notification (on Mac OSX) if a (long running) command completes and the terminal isn't in the foreground.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First, a screenshot:&lt;/p&gt;
&lt;p&gt;&lt;img alt="zsh theme" src="https://codearcana.com/images/zsh_theme.png" title="My zsh theme"&gt;
&lt;img alt="zsh theme popup" src="https://codearcana.com/images/zsh_theme_popup.png" title="A sample notification - click to focus on the terminal window."&gt;&lt;/p&gt;
&lt;p&gt;And some more detailed explanation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By default, the prompt is very minimalist (the current directory and a % or a # depending on the privileges of the shell). Most extra information is hidden unless it is useful.&lt;/li&gt;
&lt;li&gt;In the right hand prompt, the execution time of the last command is displayed. It is colored green if the command returned successfully and red otherwise.&lt;/li&gt;
&lt;li&gt;The number of background processes is displayed (but only if there are background processes).&lt;/li&gt;
&lt;li&gt;If the path to the current directory is long, it is also displayed in the right hand side.&lt;/li&gt;
&lt;li&gt;The user and hostname are displayed (only) if logged in over &lt;code&gt;ssh&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Since this is &lt;code&gt;zsh&lt;/code&gt;, the right hand prompt disappears if the line is long enough.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Source is in &lt;a href="https://github.com/awreece/oh-my-zsh/blob/master/themes/awreece.zsh-theme"&gt;my fork of &lt;code&gt;oh-my-zsh&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/awreece/prezto/blob/theme/modules/prompt/functions/prompt_awreece_setup"&gt;my fork of &lt;code&gt;prezto&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</content><category term="zsh"></category></entry><entry><title>CS Theory with Make</title><link href="https://codearcana.com/posts/2012/03/05/cs-theory-with-make.html" rel="alternate"></link><published>2012-03-05T00:00:00-08:00</published><updated>2012-03-05T00:00:00-08:00</updated><author><name>Alex Reece</name></author><id>tag:codearcana.com,2012-03-05:/posts/2012/03/05/cs-theory-with-make.html</id><summary type="html">&lt;p&gt;In this post, I play around with some make functions and eventually provide a constructive proof that the make syntax is turing complete via reduction to μ-recursion.&lt;/p&gt;
&lt;p&gt;First, we have to construct numbers. I used the representation of numbers as
unary strings of the character &lt;code&gt;0&lt;/code&gt;: ie, the number 4 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this post, I play around with some make functions and eventually provide a constructive proof that the make syntax is turing complete via reduction to μ-recursion.&lt;/p&gt;
&lt;p&gt;First, we have to construct numbers. I used the representation of numbers as
unary strings of the character &lt;code&gt;0&lt;/code&gt;: ie, the number 4 is represented by &lt;code&gt;0000&lt;/code&gt;
(zero being the empty string). We can also compute the successor of a number:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;# If this is called as a make function, $(1) will be replaced with the first&lt;/span&gt;
&lt;span class="c"&gt;# function argument.&lt;/span&gt;
&lt;span class="nv"&gt;successor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; O&lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;info&lt;/span&gt; &lt;span class="k"&gt;$&lt;/span&gt;(&lt;span class="nv"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;successor&lt;/span&gt;,&lt;span class="nv"&gt;O&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# Outputs &amp;#39;OO&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Life is a lot easier if we can compute predecesser. Luckily, this is pretty
easy for us too:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;monus_one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;patsubst O%,%,&lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;info&lt;/span&gt; &lt;span class="k"&gt;$&lt;/span&gt;(&lt;span class="nv"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;monus_one&lt;/span&gt;,&lt;span class="nv"&gt;OO&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# Outputs &amp;#39;0&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now lets actually do computation with this. It is hideous, but we can actually
compute fibonacci numbers in make:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;fib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(if&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;)&lt;/span&gt;,&lt;span class="k"&gt;$(if&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;call monus_one,&lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;))&lt;/span&gt;,&lt;span class="k"&gt;$(&lt;/span&gt;call fib,&lt;span class="k"&gt;$(&lt;/span&gt;call &lt;span class="se"&gt;\&lt;/span&gt;
  monus_one,&lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;call fib,&lt;span class="k"&gt;$(&lt;/span&gt;call monus_one,&lt;span class="k"&gt;$(&lt;/span&gt;call monus_one,&lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;))))&lt;/span&gt;,O&lt;span class="o"&gt;)&lt;/span&gt;,O&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let me try to break this up a bit. I'll add comments but it will no longer be
valid make.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;# fib (n):&lt;/span&gt;
&lt;span class="nv"&gt;fib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(if&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;)&lt;/span&gt;, &lt;span class="c1"&gt;# If n &amp;gt; 0:&lt;/span&gt;
          &lt;span class="k"&gt;$(if&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;call monus_one,&lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;))&lt;/span&gt;, &lt;span class="c1"&gt;# if n - 1 &amp;gt; 0:&lt;/span&gt;
&lt;span class="c"&gt;              # return fib(n-1) + fib(n-2)&lt;/span&gt;
              &lt;span class="k"&gt;$(&lt;/span&gt;call fib,&lt;span class="k"&gt;$(&lt;/span&gt;call monus_one,&lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;)))$(&lt;/span&gt;call fib,&lt;span class="k"&gt;$(&lt;/span&gt;call monus_one,&lt;span class="k"&gt;$(&lt;/span&gt;call monus_one, &lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;))))&lt;/span&gt;
          ,O&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# else: return 1&lt;/span&gt;
      ,O&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# else: return 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is pretty fun and all, but we haven't actually done anything that we
couldn't do with a primitive recursive function. We can easily show that make
is more powerful than primitive recusion by encoding the &lt;a href="https://en.wikipedia.org/wiki/Ackermann_function"&gt;Ackerman
function&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;ack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(if&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;)&lt;/span&gt;,&lt;span class="k"&gt;$(if&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;2&lt;span class="k"&gt;)&lt;/span&gt;,&lt;span class="k"&gt;$(&lt;/span&gt;call ack,&lt;span class="k"&gt;$(&lt;/span&gt;call monus_one,&lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;))&lt;/span&gt;,&lt;span class="k"&gt;$(&lt;/span&gt;call &lt;span class="se"&gt;\&lt;/span&gt;
  ack,&lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;)&lt;/span&gt;,&lt;span class="k"&gt;$(&lt;/span&gt;call monus_one,&lt;span class="k"&gt;$(&lt;/span&gt;2&lt;span class="k"&gt;))&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="k"&gt;$(&lt;/span&gt;call ack,&lt;span class="k"&gt;$(&lt;/span&gt;call monus_one,&lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;))&lt;/span&gt;,O&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="k"&gt;$(&lt;/span&gt;2&lt;span class="k"&gt;)&lt;/span&gt;O&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All right, so how far can we take this? As it turns out, there is a class of
functions that are computable only by a turing complete language:
&lt;a href="https://en.wikipedia.org/wiki/%CE%9C-recursive_function"&gt;µ-recursive 
functions&lt;/a&gt;. They are
the primitive recursive functions with the addition of the minimization (µ)
operator: µ of f(x) is the minimum x such that f(x)=0. As it turns out, we can
encode this operator in make:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;# muh f x returns the first number greater than or equal to x such&lt;/span&gt;
&lt;span class="c"&gt;# that f(x) is true.&lt;/span&gt;
&lt;span class="nv"&gt;muh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(if&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;call &lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;)&lt;/span&gt;,&lt;span class="k"&gt;$(&lt;/span&gt;2&lt;span class="k"&gt;))&lt;/span&gt;,&lt;span class="k"&gt;$(&lt;/span&gt;2&lt;span class="k"&gt;)&lt;/span&gt;,&lt;span class="k"&gt;$(&lt;/span&gt;call muh,&lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;)&lt;/span&gt;,O&lt;span class="k"&gt;$(&lt;/span&gt;2&lt;span class="k"&gt;)))&lt;/span&gt;

&lt;span class="c"&gt;# mu f returns the first number greater than or equal to 0 such&lt;/span&gt;
&lt;span class="c"&gt;# that f(x) is true.&lt;/span&gt;
&lt;span class="nv"&gt;mu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;call muh,&lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;)&lt;/span&gt;,&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Wow! There we have it, make is turing complete. As a final piece of fun, here
is the inverse ackerman function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;not&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(if&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;)&lt;/span&gt;,,O&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# lesseq_template n creates a function lesseq_y that returns y &amp;lt; x&lt;/span&gt;
&lt;span class="cp"&gt;define lesseq_template&lt;/span&gt;
  lesseq_&lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;findstring &lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="cp"&gt;endef&lt;/span&gt;

&lt;span class="c"&gt;# geack_template y creates a function geack_y that returns ack(x) &amp;gt; y&lt;/span&gt;
&lt;span class="cp"&gt;define geack_template&lt;/span&gt;
  geack_&lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;call lesseq_template,&lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;)))&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;call not,&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;call lesseq_&lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;)&lt;/span&gt;,&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;call ack,&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;))))&lt;/span&gt;
&lt;span class="cp"&gt;endef&lt;/span&gt;

&lt;span class="c"&gt;# invack n: Find the first value x such that ack(x) &amp;gt; n.&lt;/span&gt;
&lt;span class="nv"&gt;invack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;call geack_template,&lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;)))$(&lt;/span&gt;call mu,geack_&lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="make"></category><category term="theory"></category></entry></feed>